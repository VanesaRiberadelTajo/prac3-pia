# -*- coding: utf-8 -*-
"""Tarea_Reserva_Hoteles.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1q9Fv-z14Gp7UBKcbG6FoqNzaC9FhOuHh

# Tarea: Predicción de reserva de hotoles

Imaginemos que una empresa está en busca de un Científico de Datos. Nos piden realizar una tarea técnica para comprobar que el postulante cumple con los requisitos para el puesto. 

La tarea consiste en generar un modelo de Inteligencia Artificial que sea capaz de predecir si una reserva de hotel será cancelada.

Nos proprocionan el archivo de datos (bookings.csv) que contiene datos sobre la reserva de un hotel urbano y de un hotel turístico, e incluye información como la fecha de la reserva, la duración de la estancia, el número de adultos, niños y/o bebés, y el número de plazas de aparcamiento disponibles, entre otras variables.

# Objetivos:

El objetivo de esta tarea es conseguir lograr demostrar la habilidades de desarrollador de sistemas inteligentes analizando y creando un modelo para este conjunto de datos. Para ello:

- Derive tantas características de estos datos como crea que sean relevantes.
- Construya un modelo en Python con Keras para estimar la probabilidad de que una reserva sea cancelada.

## Importar bibliotecas

Lo primero que debemos hacer es cargar los módulos necesarios para resolver el problema propuesto.
"""

# Libraries to handle data
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import seaborn as sns

# Libraries to handle neural networks
import keras
import tensorflow as tf
from tensorflow.keras.utils import to_categorical
from keras.models import Sequential
from keras.layers import Dense

"""# Preparación del set de entrenamiento

Con el siguiente fragmento de código cargamos un dataset ubicado en algún directorio de nuestro equipo, sin necesidad de subirlo a la nube.
"""

# Load the csv file
from google.colab import files

uploaded = files.upload()
for fn in uploaded.keys():
  print('User uploaded file "{name}" with length {length} bytes'.format(
      name=fn, length=len(uploaded[fn])))

"""Ahora, preparamos los datos para construir nuestro modelo. Lo primero que tenemos que hacer es visualizar los datos y realizar las transformaciones pertinentes en base a un estudio previo del dataset."""

import io
from sklearn.utils import shuffle

# Load data into a Pandas' Dataframe structure.
df_train = pd.read_csv(io.StringIO(uploaded[fn].decode('utf-8')))

# Plot table with data
df_train.head()

# Generate descriptive statistics of the dataframe
df_train.describe()

# Print a concise summary of a DataFrame.
df_train.info()

"""Antes de comenzar a procesar los datos de entrenamiento, veamos si los datos están o no balanceados. Esto es realmente importante, dado que si hay un número considerable de una salida frente a otra, el resultado de la predicción probablemente será erróneo."""

target_count = df_train['is_canceled'].value_counts()
print('Class 0:', target_count[0])
print('Class 1:', target_count[1])
print('Proportion:', round(target_count[0] / target_count[1], 2), ': 1')

target_count.plot(kind='bar', title='Count (target)');

'''
Tarea: Podemos ver que los datos están ligeramente desbalancdeados.
Utiliza la técnica de resampling para balancear el dataset.
'''

# Split data into two dataframes because data is not balanced

# Save dataframe

'''
Tarea: Hay una columna con más del 90% de sus valores a NULL.

TODO: Encuentra dicha columna y elimínala del dataframe.
'''

'''
Si analizamos el dataset podemos ver que hay muchas columnas que contienen
algunos valores nulos. Arreglemos esto rellenando dichas celdas con ceros.
'''
df_train.fillna(0, inplace=True)

'''
Adultos, niños y bebés no pueden ser cero al mismo tiempo. Eliminemos dichas filas.
'''

filter = (df_train['children'] == 0) & (df_train['adults'] == 0) & (df_train['babies'] == 0)
df_train = df_train[~filter]

'''
Tarea: El grupo de edad de cada persona no aporta mucho a
si la reserva se cancelará o no, pero sí el número total de personas.

TODO: Calcula la columna 'people_count' en base a la considereación anterior.
'''

'''
Tenemos las noches que los huéspedes se hospedan en el hotel dividido en semanas
y fin de semanas, lo cual no aporta mucho a si la reserva se cancelará o no, 
pero sí el número total de noches de la reserva.

TODO: Calcula la columna 'total_nights' en base a la considereación anterior.
'''

'''
Tarea: La columna 'reservation_status_date' puede representar un problema a la 
hora de crear nuestro modelo.

TODO: Divide 'date' en tres columnas: 'year', 'month' y 'day'.
'''

'''
Tarea: Identifica aquellas variables que son categóricas y aplícales una
codificación.
'''

'''
Tarea: Elimna el resto de columnas que no son útiles o necesarias para
nuestro modelo.
'''

'''
Tarea: Divide el dataset en 'features' (X) y 'output' (Y).
Utiliza 70% para entrenamiento, 15% para test y el resto para validación.

Tip: Usa 'train_test_split' de 'sklearn.model_selection'
'''

"""## Functions to plot a graphic

Funciones de ayuda para dibujar gráficas
"""

from sklearn.metrics import confusion_matrix

# Helper function to plot training model
def plot_history(history):
  plt.figure()
  plt.xlabel('Epoch')
  plt.ylabel('Error')
  plt.plot(history.epoch, np.array(history.history['loss']),
           label='Error (loss) in training')
  plt.legend()
  plt.ylim([0, max(1,max(np.array(history.history['loss'])))])

# Helper function to plot the confussion matrix  
def plot_confusion_matrix(Y_test, Y_predict):
  cm = confusion_matrix(Y_test, Y_predict)
  fig = plt.figure()
  ax = fig.add_subplot(111)
  cax = ax.matshow(cm)
  plt.title('Confusion matrix of the classifier')
  fig.colorbar(cax)
  plt.xlabel('Predicted')
  plt.ylabel('True')
  plt.show()

"""## Construir y entrenar red neuronal"""

'''
Tarea: Crea la estructura de una red neuronal con Keras para predecir si una
reserva puede ser o no cancelada.

TODO:

Utiliza, al menos, dos técnicas avanzadas para modelado de redes neuronales.

1. Crea la estructura de una red neuronal.
2. Compila la red.
3. Entrena la red.
4. Pinta una gráfica que represente la disminución del error durante el
entrenamiento. Para ello, usa la función 'plot_history'.
'''

'''
Tarea: Evalúa el modelo con la api de Keras.
'''

'''
Tarea: Pinta la matriz de confusión del modelo usando la función 
'plot_confusion_matrix'.
'''

# Predict model

# Plot confusion matrix